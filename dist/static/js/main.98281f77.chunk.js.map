{"version":3,"sources":["components/Part.js","components/LeftList.js","App.js","serviceWorker.js","index.js"],"names":["Part","className","style","width","this","props","height","children","React","Component","LeftSide","apiList","refresh","useState","isShow","setIsShow","responseText","setResponseText","myProps","open","showDialog","api","a","fetch","res","json","text","JSON","stringify","replace","match","cls","test","delMockData","e","stopPropagation","method","body","path","headers","code","data","swal","msg","list","map","index","key","onClick","role","aria-label","length","dangerouslySetInnerHTML","__html","getList","App","apiPath","createRef","mockData","setList","then","submit","console","log","jsonRes","useEffect","placeholder","ref","rows","data-className","current","value","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98281f77.chunk.js","sourcesContent":["import React from 'react'\nimport './part.css'\n\nexport default class Part extends React.Component {\n  render () {\n    return (\n      <section className=\"part-outer\" style={{width: this.props.width, height: this.props.height}}>\n        <wired-card>\n          <div className=\"part-inner\" style={{width: this.props.width, height: `calc(${this.props.height} - 20px)`}}>\n            {this.props.children || 'part slot here'}\n          </div>\n        </wired-card>\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport { useState, createRef } from 'react'\nimport './leftSide.css'\nimport swal from 'sweetalert'\n\n/**\n * ÊääjsonÊîπÊàêÈ´ò‰∫Æ\n * @param {string} json\n */\nfunction syntaxHighlight(json) {\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span class=\"' + cls + '\">' + match + '</span>';\n  });\n}\n\nconst LeftSide = ({apiList = [], refresh = () => {}}) => {\n  // done todo ÁÇπÂáªapiÂêç, ÂºπÂá∫dialog ÊòæÁ§∫response\n  const [isShow, setIsShow] = useState(false)\n  const [responseText, setResponseText] = useState('')\n  const myProps = isShow ? { open: true } : {}\n  const showDialog = async (api) => {\n    setIsShow(true)\n    let res = await fetch('..' + api)\n    try {\n      res = await res.json()\n    } catch(e) {\n      res = await res.text()\n    }\n    res = JSON.stringify(res, null, 2)\n    res = syntaxHighlight(res) // È´ò‰∫Æ\n    setResponseText(res)\n\n  }\n  const hideDialog = () => {\n    setIsShow(false)\n  }\n\n  const delMockData = async (e, api) => {\n    e.stopPropagation()\n    let res = await fetch('../delMockData', {\n      method: 'POST',\n      body: JSON.stringify({\n        path: api\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n    res = await res.json()\n    if (res.code === 200 && res.data) {\n      refresh()\n      swal('Delete Success', 'ok', 'success')\n\n    } else {\n      swal('Delete Failed', res.msg || 'No msg..', 'error')\n    }\n  }\n  let list = (\n    <ul className=\"left-side\">\n      {\n        apiList.map((api, index) => (\n          <li key={index} onClick={e => showDialog(api.path)}>\n            <span role=\"img\" aria-label=\"each-api\" className=\"emoji bone\">ü¶¥</span>\n            <span role=\"img\" aria-label=\"each-api\" className=\"emoji face\">ü§© </span>\n            <span>\n              {api.path}\n            </span>\n            <strong className=\"del-path\" onClick={e => delMockData(e, api.path)}>x</strong>\n          </li>\n        ))\n      }\n    </ul>\n  )\n  let noList = 'no list'\n  return (\n    <div>\n      {apiList.length ? list : noList}\n      <wired-dialog { ...myProps }>\n        <div className=\"res-dialog-box\">\n          <wired-button onClick={hideDialog}>Close</wired-button>\n          <div>\n            <pre\n              dangerouslySetInnerHTML={{ __html: responseText}}\n            >\n            </pre>\n          </div>\n        </div>\n      </wired-dialog>\n    </div>\n  )\n}\n\nexport default LeftSide","import React from 'react';\nimport { useState, useEffect, createRef } from 'react'\nimport 'wired-elements'\nimport './App.css';\n// import HTextarea from './components/HTextarea'\nimport Part from './components/Part'\nimport LeftSide from './components/LeftList'\nimport swal from 'sweetalert'\n\nasync function getList () {\n  let res = await fetch('../mockDataList')\n  res = await res.json()\n  return res\n}\n\nfunction App() {\n  let apiPath = createRef()\n  let mockData = createRef()\n  const [list, setList] = useState([])\n  // const [data, setData] = useState('')\n  useEffect(() => {\n    getList().then(res => {\n      setList(res.data)\n    })\n  }, []) // Á¨¨‰∫å‰∏™ÂèÇÊï∞‰º†ÂÖ•Dep, ‰æùËµñÊõ¥Êñ∞Êâç‰ºöÂÜçÊ¨°Ë∞ÉÁî®Ëøô‰∏™useEffect, Á©∫Êï∞ÁªÑÈáåÊ≤°ÂæóÊõ¥Êñ∞, ÊâÄ‰ª•Âè™‰ºöË∞ÉÁî®‰∏ÄÊ¨°\n  async function refresh () {\n    getList().then(res => {\n      setList(res.data)\n    })\n  }\n\n  async function submit (path, data) {\n    console.log('submit: ', path, data);\n    const res =  await fetch('../addMockData', {\n      method: 'POST',\n      body: JSON.stringify({\n        path, data\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n    let jsonRes\n    try {\n      jsonRes = await res.json()\n    } catch (err) {\n      jsonRes = await res.text()\n    }\n    console.log(jsonRes)\n    refresh()\n    return jsonRes \n  }\n  // let handler = (v, e, t) => {\n  //   console.log(v, e, t);\n  //   // t.setState({\n  //   //   content: ''\n  //   // })\n  // }\n\n  let placeholder = `{\n    \"code\": 403, // ÂèØ‰ª•Ëá™ÂÆö‰πâËøîÂõûcode, ÈªòËÆ§200\n    \"data\": {\n      \"xxx\": \"keke\",\n      \"msg\": \"886\"\n    }\n }\n  OR--\n  {\n    \"xxx\": \"keke\",\n    \"msg\": \"886\"\n  }\n `\n\n  return (\n    <div className=\"App\">\n      <Part width=\"auto\" height=\"100vh\">\n        <LeftSide apiList={list} refresh={refresh}></LeftSide>\n      </Part>\n      <main className=\"main-part\">\n        <section className=\"mock-item\">\n          <wired-input placeholder=\"api path\" ref={apiPath}></wired-input>\n          {/* <HTextarea placeholder=\"hello boy\" value={data} ref={mockData} inputHandler={handler}></HTextarea> */}\n          <wired-textarea placeholder={placeholder} ref={mockData} rows=\"20\" data-className=\"mock-data\"></wired-textarea>\n          <div className=\"mock-item-btn-box\">\n            <div className=\"mock-item-btn\">\n              <wired-button className=\"mock-item-btn\"\n                onClick={async () => {\n                  // await submit(apiPath.current.value, mockData.current.state.content)\n                  const res = await submit(apiPath.current.value, mockData.current.value)\n                  if (res.code === 200) {\n                    apiPath.current.value = ''\n                    mockData.current.value = ''\n                    swal(\"Good job!\", \"Submit Success !\", \"success\")\n                  } else {\n                    swal('Err code: ' + res.code, res.msg || 'No err Msg', 'error')\n                  }\n                }}\n              >submit</wired-button>\n            </div>\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}