#!/usr/bin/env node
"use strict";var e=require("express"),t=require("process"),a=require("better-sqlite3"),o=require("url"),s=require("body-parser"),n=require("fs"),r=require("path"),c="undefined"!=typeof document?document.currentScript:null;const d=o.fileURLToPath(new URL("../mockdata.db","undefined"==typeof document?require("url").pathToFileURL(__filename).href:c&&"SCRIPT"===c.tagName.toUpperCase()&&c.src||new URL("bundle.cjs",document.baseURI).href)),i=new a(d);async function p(e){if(e){return i.prepare("SELECT * FROM api_mock WHERE path = ?").get(e)}return i.prepare("SELECT * FROM api_mock").all()}console.log("db path: "+d),function(){const e=i.prepare('CREATE TABLE IF NOT EXISTS "api_mock" ("id" integer,"path" varchar,"data" text,"code" int DEFAULT 200,"message" varchar,"delay_ms" int DEFAULT 0, "format" varchar DEFAULT "plaintext", PRIMARY KEY (id))').run();e.changes>0&&console.log("create table api_mock success")}();const l=e.Router();l.post("/alive",((e,t)=>{t.json({code:200,data:"",msg:"alive"})})),l.post("/addMockData",(async(e,t)=>{let{data:a,path:o,code:s,message:n,delayMs:r}=e.body;a&&o||t.json({code:400,msg:"path and mock data need to be send"});if(!/^\/[\w-]+(\.?[\w-]+)*([\w\-.,@?^=%&:/~+#]*[\w\-@?^=%&/~+#])?$/.test(o))return void t.json({code:400,msg:"path 不是url格式, 正则: --\x3e  /^/[w-]+(.?[w-]+)+([w-.,@?^=%&:/~+#]*[w-@?^=%&/~+#])?$/  <--"});let c="";try{let e="string"==typeof a?JSON.parse(a):a;a=e.data?JSON.stringify(e.data):JSON.stringify(e),e.code&&(s=e.code),e.message&&(n=e.message)}catch(e){c=e.message}if(c)t.json({code:400,msg:"mock data must be json format",errMsg:c});else{const e=async function(e){if(!e)return;return i.prepare("INSERT INTO api_mock (path, data, code, message, delay_ms) VALUES (?, ?, ?, ?, ?)").run(e.path,e.data,e.code||200,e.message,e.delayMs||0)}({data:a,path:o,code:s,message:n,delayMs:r}).catch((e=>(console.log(e,"err"),e)));t.json({code:200,data:e})}})),l.post("/delMockData",(async(e,t)=>{const{path:a}=e.body,o=await async function(e){if(!e)return;return i.prepare("DELETE FROM api_mock WHERE path = ?").run(e)}(a);t.json({code:200,data:o})})),l.get("/mockDataList",(async(e,t)=>{const a=await p();t.json({code:200,data:a})}));const u=e.Router();u.use("/-meta-heyyo",l),u.use((async(e,t)=>{const a=e.path,o=await p(a);let s=null;try{s="string"==typeof o.data?JSON.parse(o.data):o}catch(e){console.log(e)}s?setTimeout((()=>{t.json({code:o.code,path:a,data:s,message:o.message||""})}),o.delay_ms):t.json({code:o.code,path:a,data:o,msg:"数据解析失败, 因为不是json格式;"})}));const m=e(),g=o.fileURLToPath(new URL("../dist","undefined"==typeof document?require("url").pathToFileURL(__filename).href:c&&"SCRIPT"===c.tagName.toUpperCase()&&c.src||new URL("bundle.cjs",document.baseURI).href)),f=o.fileURLToPath(new URL("../package.json","undefined"==typeof document?require("url").pathToFileURL(__filename).href:c&&"SCRIPT"===c.tagName.toUpperCase()&&c.src||new URL("bundle.cjs",document.baseURI).href));!async function(){m.use(s.urlencoded({extended:!0,limit:"10mb"})),m.use(s.json({limit:"10mb"})),m.use(e.static(g)),m.use(((e,t,a)=>{console.log("get in service"),console.log(e.path,"path"),a()})),m.use(u);const a=await async function(){let e={};try{const a=r.join(t.cwd(),"mockdata.config.json");e=n.readFileSync(a,"utf8"),e=JSON.parse(e)}catch(e){}return{port:e.port||3e3}}();m.listen(a.port,(async()=>{const e=n.readFileSync(f,"utf8");let t="";try{t=JSON.parse(e).version}catch(e){console.log("read package.json error, ",e.message)}console.log(`App (${t}) running on port ${a.port}`)}))}(),t.on("SIGINT",(()=>{console.log("Received SIGINT. Exiting..."),t.exit()})),t.on("SIGTERM",(()=>{console.log("Received SIGTERM. Exiting..."),t.exit()}));
