#!/usr/bin/env node
"use strict";var e=require("express"),a=require("process"),t=require("better-sqlite3"),o=require("url"),s=require("body-parser"),n=require("fs"),r="undefined"!=typeof document?document.currentScript:null;const c=new t(o.fileURLToPath(new URL("../mockdata.db","undefined"==typeof document?require("url").pathToFileURL(__filename).href:r&&"SCRIPT"===r.tagName.toUpperCase()&&r.src||new URL("bundle.cjs",document.baseURI).href)));async function d(e){if(e){return c.prepare("SELECT * FROM api_mock WHERE path = ?").get(e)}return c.prepare("SELECT * FROM api_mock").all()}!function(){const e=c.prepare('CREATE TABLE IF NOT EXISTS "api_mock" ("id" integer,"path" varchar,"data" text,"code" int DEFAULT 200,"message" varchar,"delay_ms" int DEFAULT 0, "format" varchar DEFAULT "plaintext", PRIMARY KEY (id))').run();e.changes>0&&console.log("create table api_mock success")}();const i=e.Router();i.post("/addMockData",(async(e,a)=>{let{data:t,path:o,code:s,message:n,delayMs:r}=e.body;t&&o||a.json({code:400,msg:"path and mock data need to be send"});if(!/^\/[\w-]+(\.?[\w-]+)*([\w\-.,@?^=%&:/~+#]*[\w\-@?^=%&/~+#])?$/.test(o))return void a.json({code:400,msg:"path 不是url格式, 正则: --\x3e  /^/[w-]+(.?[w-]+)+([w-.,@?^=%&:/~+#]*[w-@?^=%&/~+#])?$/  <--"});let d="";try{let e="string"==typeof t?JSON.parse(t):t;t=e.data?JSON.stringify(e.data):JSON.stringify(e),e.code&&(s=e.code),e.message&&(n=e.message)}catch(e){d=e.message}if(d)a.json({code:400,msg:"mock data must be json format",errMsg:d});else{const e=async function(e){if(!e)return;return c.prepare("INSERT INTO api_mock (path, data, code, message, delay_ms) VALUES (?, ?, ?, ?, ?)").run(e.path,e.data,e.code||200,e.message,e.delayMs||0)}({data:t,path:o,code:s,message:n,delayMs:r}).catch((e=>(console.log(e,"err"),e)));a.json({code:200,data:e})}})),i.post("/delMockData",(async(e,a)=>{const{path:t}=e.body,o=await async function(e){if(!e)return;return c.prepare("DELETE FROM api_mock WHERE path = ?").run(e)}(t);a.json({code:200,data:o})})),i.get("/mockDataList",(async(e,a)=>{const t=await d();a.json({code:200,data:t})})),i.use((async(e,a)=>{const t=e.path,o=await d(t);let s=null;try{s="string"==typeof o.data?JSON.parse(o.data):o}catch(e){console.log(e)}s?setTimeout((()=>{a.json({code:o.code,path:t,data:s,message:o.message||""})}),o.delay_ms):a.json({code:o.code,path:t,data:o,msg:"数据解析失败, 因为不是json格式;"})}));const l=e(),p=o.fileURLToPath(new URL("../dist","undefined"==typeof document?require("url").pathToFileURL(__filename).href:r&&"SCRIPT"===r.tagName.toUpperCase()&&r.src||new URL("bundle.cjs",document.baseURI).href)),u=o.fileURLToPath(new URL("../package.json","undefined"==typeof document?require("url").pathToFileURL(__filename).href:r&&"SCRIPT"===r.tagName.toUpperCase()&&r.src||new URL("bundle.cjs",document.baseURI).href));l.use(s.urlencoded({extended:!0,limit:"10mb"})),l.use(s.json({limit:"10mb"})),l.use(e.static(p)),l.use(((e,a,t)=>{console.log("get in service"),console.log(e.path,"path"),t()})),l.use(i),l.listen(3e3,(()=>{const e=n.readFileSync(u,"utf8");let a="";try{a=JSON.parse(e).version}catch(e){console.log("read package.json error, ",e.message)}console.log(`App (${a}) running on port 3000`)})),a.on("SIGINT",(()=>{console.log("Received SIGINT. Exiting..."),a.exit()})),a.on("SIGTERM",(()=>{console.log("Received SIGTERM. Exiting..."),a.exit()}));
